package org.example.zoo.service;

import org.example.zoo.model.Zoo;
import org.example.zoo.repository.ZooRepository;
import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebService;

import java.util.List;

@WebService
public class ZooService {
    private ZooRepository repository = new ZooRepository();

    @WebMethod
    public List<Zoo> getAllZoos() {
        List<Zoo> zoos = repository.getAllZoos();
        // ‚úÖ Log para verificar si se est√° enviando bien la ubicaci√≥n
        for (Zoo zoo : zoos) {
            System.out.println("üì° Enviando zoo: " + zoo.getId() + " | Ubicaci√≥n: " + zoo.getLocation());
        }
        return zoos;
    }


    @WebMethod
    public Zoo getZooById(@WebParam(name = "id") String id) {
        return repository.getZooById(id);
    }

    @WebMethod
    public String addZoo(@WebParam(name = "zoo") Zoo zoo) {
        boolean success = repository.addZoo(zoo);
        return success ? "‚úÖ Zool√≥gico agregado exitosamente" : "‚ùå Error al agregar zool√≥gico";
    }

    @WebMethod
    public String updateZoo(@WebParam(name = "id") String id, @WebParam(name = "updatedZoo") Zoo updatedZoo) {
        System.out.println("üì• Recibiendo solicitud de actualizaci√≥n para ID: " + id);

        if (id == null || id.trim().isEmpty()) {
            System.err.println("‚ùå Error: ID nulo o vac√≠o en la solicitud SOAP.");
            return "‚ùå Error: ID nulo o vac√≠o en la solicitud SOAP.";
        }

        boolean success = repository.updateZoo(id, updatedZoo);
        return success ? "‚úÖ Zool√≥gico actualizado exitosamente" : "‚ùå Error al actualizar zool√≥gico";
    }


    @WebMethod
    public String deleteZoo(@WebParam(name = "id") String id) {
        boolean success = repository.deleteZoo(id);
        return success ? "‚úÖ Zool√≥gico eliminado exitosamente" : "‚ùå Error al eliminar zool√≥gico";
    }

}
